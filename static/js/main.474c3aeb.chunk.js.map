{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","reducers.js","serviceWorkerRegistration.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","id","name","email","className","alt","src","CardList","robots","console","log","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","CounterButton","updateCount","count","nextProps","nextState","color","onClick","PureComponent","Header","connect","searchField","searchRobots","requestRobots","isPending","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","fetch","response","json","data","catch","useState","setCount","filteredRobots","filter","robot","toLowerCase","includes","useEffect","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.474c3aeb.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\n\r\nconst Card = ({ id, name, email } ) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ( {robots} ) => {\r\n    console.log('CardList')\r\n    return (\r\n        <div>\r\n            {robots.map((user, i)=>{\r\n                return (\r\n                <Card \r\n                    key={i} \r\n                    id={robots[i].id} \r\n                    name={robots[i].name} \r\n                    email={robots[i].email}/>\r\n                    )\r\n            })}\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBox =  ({searchfield, searchChange}) => {\r\n    console.log('SearchBox')\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='search robots' \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Not Good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import React, { PureComponent } from \"react\";\r\n\r\nclass CounterButton extends PureComponent {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.count !== nextState.count) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return { count: state.count + 1}\r\n        })\r\n    }\r\n    render() {\r\n        console.log('CounterButton')\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\r\n            );\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from \"react\";\r\nimport CounterButton from \"./CounterButton\";\r\n\r\nclass Header extends Component {\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     return false;\r\n    // }\r\n\r\n    render() {\r\n        console.log('Header')\r\n        return (<div>\r\n            <CounterButton color={'red'} />\r\n            <h1 className='f2'>RoboFriends</h1> \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { useState, useEffect} from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport './App.css'\r\nimport { requestRobots, setSearchField } from \"../actions\";\r\nimport Header from \"../components/Header\";\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\nconst App = (props) => {\r\n    const [count, setCount] = useState(0)\r\n    const { searchField, onSearchChange, robots, isPending, onRequestRobots } = props;\r\n    const filteredRobots = robots.filter(robot => {\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n    useEffect(() =>  {\r\n        onRequestRobots()\r\n    }, [onRequestRobots])\r\n\r\n\r\n    return isPending?  (<h1>Loading...</h1>) :\r\n        (\r\n            <div className='tc'>\r\n                <Header />\r\n                <button onClick={() => setCount(count + 1)}>Click Me!</button>\r\n                <SearchBox searchChange={onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS } from \"./constants\"\r\n\r\nexport const setSearchField = (text) => {\r\n    console.log(text)\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n};\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}\r\n\r\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_PENDING } from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    console.log(action.type)\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            // { ...state, searchField: action.payload}\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport  thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}